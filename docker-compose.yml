version: '3.8'

services:
  # MongoDB数据库服务
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=lvtong_admin_2024
      - MONGO_INITDB_DATABASE=lvtong
    ports:
      - "127.0.0.1:27017:27017"  # 只绑定到本地
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Flask后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: flask-api
    restart: unless-stopped
    env_file:
      - .env  # 添加这行，从.env文件读取
    environment:
      # 保留固定的配置
      - FLASK_ENV=production
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - FLASK_DEBUG=false
      - MONGODB_URI=mongodb://admin:lvtong_admin_2024@mongodb:27017/lvtong?authSource=admin
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
      # 添加 Azure OpenAI 环境变量
      - AZURE_AI_API_KEY_4O=${AZURE_AI_API_KEY_4O}
      - AZURE_AI_ENDPOINT_4O=${AZURE_AI_ENDPOINT_4O}
    ports:
      - "127.0.0.1:5000:5000"  # 只绑定到本地，通过nginx代理
    volumes:
      - backend_logs:/app/logs
    networks:
      - api-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx反向代理服务
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    # MongoDB Web管理界面
  mongo-express:
    image: mongo-express:1.0.0-alpha
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=lvtong_admin_2024
      - ME_CONFIG_MONGODB_URL=mongodb://admin:lvtong_admin_2024@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=lvtong_web_2024
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - api-network

  # Dozzle日志查看器
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"  # 只绑定到本地，通过nginx代理
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOZZLE_NO_ANALYTICS=true
      - DOZZLE_LEVEL=info
      - DOZZLE_TAILSIZE=300
      - DOZZLE_FILTER="name=mongodb,flask-api,nginx-proxy,mongo-express"
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# 网络配置
networks:
  api-network:
    driver: bridge
    name: api-network

# 数据卷配置
volumes:
  mongodb_data:
    name: mongodb_data
  mongodb_config:
    name: mongodb_config
  backend_logs:
    name: backend_logs
  nginx_logs:
    name: nginx_logs

# 生产环境额外配置示例
# services:
#   # 可以添加数据库服务
#   # database:
#   #   image: postgres:15-alpine
#   #   container_name: postgres-db
#   #   restart: unless-stopped
#   #   environment:
#   #     POSTGRES_DB: myapp
#   #     POSTGRES_USER: myuser
#   #     POSTGRES_PASSWORD: mypassword
#   #   volumes:
#   #     - postgres_data:/var/lib/postgresql/data
#   #   networks:
#   #     - api-network
#   
#   # 可以添加Redis缓存服务
#   # redis:
#   #   image: redis:7-alpine
#   #   container_name: redis-cache
#   #   restart: unless-stopped
#   #   volumes:
#   #     - redis_data:/data
#   #   networks:
#   #     - api-network

# volumes:
#   postgres_data:
#   redis_data:
