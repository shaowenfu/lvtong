version: '3.8'

services:
  # Flask后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: flask-api
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - FLASK_DEBUG=false
    ports:
      - "127.0.0.1:5000:5000"  # 只绑定到本地，通过nginx代理
    volumes:
      - backend_logs:/app/logs
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# 移除nginx服务配置
# nginx:
#   image: nginx:1.25-alpine
#   container_name: nginx-proxy
#   restart: unless-stopped
#   ports:
#     - "8080:80"    # 改为8080端口
#     - "8443:443"   # 改为8443端口
#   volumes:
#     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#     # SSL证书目录（生产环境需要）
#     # - ./ssl:/etc/nginx/ssl:ro
#     - nginx_logs:/var/log/nginx
#   depends_on:
#     backend:
#       condition: service_healthy
#   networks:
#     - api-network
#   healthcheck:
#     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
#     interval: 30s
#     timeout: 10s
#     retries: 3
#     start_period: 10s

# 网络配置
networks:
  api-network:
    driver: bridge
    name: api-network

# 数据卷配置
volumes:
  backend_logs:
    name: backend_logs
  nginx_logs:
    name: nginx_logs

# 生产环境额外配置示例
# services:
#   # 可以添加数据库服务
#   # database:
#   #   image: postgres:15-alpine
#   #   container_name: postgres-db
#   #   restart: unless-stopped
#   #   environment:
#   #     POSTGRES_DB: myapp
#   #     POSTGRES_USER: myuser
#   #     POSTGRES_PASSWORD: mypassword
#   #   volumes:
#   #     - postgres_data:/var/lib/postgresql/data
#   #   networks:
#   #     - api-network
#   
#   # 可以添加Redis缓存服务
#   # redis:
#   #   image: redis:7-alpine
#   #   container_name: redis-cache
#   #   restart: unless-stopped
#   #   volumes:
#   #     - redis_data:/data
#   #   networks:
#   #     - api-network

# volumes:
#   postgres_data:
#   redis_data:
